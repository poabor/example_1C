&НаКлиенте
Перем СчетчикОжиданияРезультатов; // Счетчик ожидания результатов

&НаКлиенте
Перем МаксИтерацийОжиданияРезультатов; // максимальное количество ожиданий

&НаКлиенте
Перем ИндикаторВыполнения; // индикатор выполнения

&НаКлиенте
Перем ФормаОбновленияНайденаОдинРаз; // Булево. Найдена форма обновления

&НаКлиенте
Перем ФормаНачальногоЗаполненияНайденаОдинРаз; // Булево. Найдена форма начального заполнения пустой базы

&НаКлиенте
Перем ПишемСлужебныйЛог; // Булево. флаг записи служебного лога

&НаКлиенте
Перем СоздаемФайлМаркер; // Булево. нужен файл-маркер успешного открытия или нет

&НаКлиенте
Функция КлиентВинда()
	СИ = Новый СистемнаяИнформация;
	Возврат (СИ.ТипПлатформы = ТипПлатформы.Windows_x86 ИЛИ СИ.ТипПлатформы = ТипПлатформы.Windows_x86_64);
КонецФункции

&НаКлиенте
Функция ИмяФайлаСлужебногоЛога()
	Если КлиентВинда() Тогда
		Возврат "C:\@TempDel\1c_service.log";
	Иначе
		Возврат "/var/log/1c_service.log";
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ИмяФайлМаркера(ПроверяемКаталог = Истина)
	Если ПроверяемКаталог Тогда
		Если КлиентВинда() Тогда
			Возврат "C:\@TempDel";
		Иначе
			Возврат "/opt/1cv8/update";
		КонецЕсли;
	Иначе
		Если КлиентВинда() Тогда
			Возврат "C:\@TempDel\user_1c_incom.success";
		Иначе
			Возврат "/opt/1cv8/update/user_1c_incom.success";
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ИнициализацияПутейФС()
	ПишемСлужебныйЛог 	= Ложь;
	СоздаемФайлМаркер	= Ложь;

	Файл = Новый Файл(ИмяФайлаСлужебногоЛога());
	Если Файл.Существует() Тогда
		ПишемСлужебныйЛог = Истина;
	КонецЕсли;
	
	Файл = Новый Файл(ИмяФайлМаркера());
	Если Файл.Существует() Тогда
		СоздаемФайлМаркер = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Попытка
		Выполнить("ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(""ОбщиеНастройкиПользователя"", 
			|""ЗапрашиватьПодтверждениеПриЗавершенииПрограммы"", Ложь);");
	Исключение
		ТекстСообщения = "Не смог снять галку подтверждения закрытия программы 1С";
		ОбщегоНазначения.СообщитьПользователю("" + ТекущаяДатаСеанса() + ". " + ТекстСообщения);
		ЗаписьЖурналаРегистрации("ЗакрытиеПредприятия_Авто", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
	КонецПопытки;
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

&НаКлиенте
Функция ФорматированныйТекстСДатой(Знач ТекстСообщения)
	ДатаСообщения = Формат(ОбщегоНазначенияКлиент.ДатаСеанса(), "ДФ=""гггг-ММ-дд ЧЧ:мм:сс""");
	ВозвращаемаяСтрока = ДатаСообщения + " : " + ТекстСообщения;
	Возврат ВозвращаемаяСтрока;
КонецФункции

&НаКлиенте
Процедура СообщениеКлиенту(Знач ТекстСообщения)
	ТекстСообщения = ФорматированныйТекстСДатой(ТекстСообщения);
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СообщениеКлиенту("1С успешно запустилась в режиме Предприятия!");
	ИнициализацияПутейФС();
	Если Не ЭтоКонфигурацияНаБазеБСПСервер() Тогда
		СоздатьФайлМаркер();
		ЗавершитьРаботуСистемы(Ложь, Ложь);
		Возврат;
	КонецЕсли; 
	
	ПодключитьОбработчикОжидания("ПроверитьНеобходимостьЗавершенияПрограммы", 10, Истина);
	ПодключитьОбработчикОжидания("ПроверитьЛегальностьОбновления", 2);
	ПодключитьОбработчикОжидания("ПроверитьНаличиеОкнаПереходаНаНовуюВерсию", 2);
	ПодключитьОбработчикОжидания("УдалитьВсеПатчи", 5);
	ПодключитьОбработчикОжидания("ПроверитьУстановитьПатчи", 8);
	
	ПроверитьНеобходимостьЗавершенияПрограммы();
	ПроверитьЛегальностьОбновления();
	ПроверитьНаличиеОкнаПереходаНаНовуюВерсию();
	//УдалитьПомеченныеОбъекты();
КонецПроцедуры

&НаКлиенте 
Процедура ПроверитьНеобходимостьЗавершенияПрограммы() Экспорт
	
	НеобходимоОжидание = СтрНайти(ПараметрЗапуска, "ЗавершитьРаботуСистемы") > 0;
	МожноЗавершатьРаботу = Ложь;
	СтрокаНеудачиОбновления = Нрег(НСтр("ru='Не удалось выполнить обновление'"));
	
	СтрокаНачальноеЗаполнение = НСтр("ru='начальное заполнение'");
	СтрокаОбновлениеВерсии = НСтр("ru='обновление версии'" );
	СтрокаЧтоНового = НРег(НСтр("ru='Что нового в конфигурации'"));
	ЗаголовокРекомендованнойПлатформы = НРег(НСтр("ru='Переход на новую версию платформы 1С:Предприятие'"));

	ФормаОбновленияНайдена = Ложь;
	ФормаНачальногоЗаполненияНайдена = Ложь;
	//ФормаРекомендованнойПлатформыНайдена = Ложь;
	
	Окна = ПолучитьОкна();
	Для каждого Окн Из Окна Цикл
		Если ТипЗнч(Окн) = Тип("ОкноКлиентскогоПриложения") Тогда
			
			Содержимое = Окн.ПолучитьСодержимое();
			ЗаголовокНРег = НРег(Строка(Окн.Заголовок));
			
			ОбновитьПрогресс = Ложь;
			Если СтрНайти(ЗаголовокНРег, СтрокаОбновлениеВерсии) > 0 Тогда
				ФормаОбновленияНайденаОдинРаз = Истина;
				ФормаОбновленияНайдена = Истина;
				ОбновитьПрогресс = Истина;
				
			ИначеЕсли СтрНайти(ЗаголовокНРег, СтрокаНачальноеЗаполнение) > 0 Тогда

				ФормаНачальногоЗаполненияНайденаОдинРаз = Истина;
				ФормаНачальногоЗаполненияНайдена = Истина;
				ОбновитьПрогресс = Истина;
			//ИначеЕсли СтрНайти(ЗаголовокНРег, ЗаголовокРекомендованнойПлатформы) > 0 Тогда
			//	ФормаРекомендованнойПлатформыНайдена = Истина;
			//	ОбновитьПрогресс = Истина;
			Иначе
				// 1.Ожидаю закрытия программы
			КонецЕсли;
			
			Если ОбновитьПрогресс Тогда
				
				СчетчикОжиданияРезультатов = 1;
				ОбновитьПрогресс(Содержимое, ИндикаторВыполнения);
				
			КонецЕсли;
			
			Если СчетчикОжиданияРезультатов > 0 И СтрНайти(ЗаголовокНРег, СтрокаЧтоНового) > 0 Тогда
				СчетчикОжиданияРезультатов = МаксИтерацийОжиданияРезультатов + 1;
				СообщениеКлиенту(" - Удачное завершение обновления");
				МожноЗавершатьРаботу = Истина;
				Прервать;
			КонецЕсли;
			
			Если СтрНайти(ЗаголовокНРег, СтрокаНеудачиОбновления) > 0 Тогда 
			    СчетчикОжиданияРезультатов = МаксИтерацийОжиданияРезультатов + 1;
				МожноЗавершатьРаботу = Истина;
				
				Попытка
					Если ТипЗнч(Содержимое) = Тип("ФормаКлиентскогоПриложения") Тогда
						ТекстОшибки = Содержимое.Элементы.ТекстСообщенияОбОшибке.Заголовок;
						ОбщегоНазначенияКлиент.СообщитьПользователю("ERROR: " + ОбщегоНазначенияКлиент.ДатаСеанса() + " " + ТекстОшибки);
					КонецЕсли; 
					
				Исключение
				 	ОбщегоНазначенияКлиент.СообщитьПользователю("ERROR: " + ОбщегоНазначенияКлиент.ДатаСеанса() + ОписаниеОшибки());   
				КонецПопытки; 
				
				ОбщегоНазначенияКлиент.СообщитьПользователю("ERROR: " + ОбщегоНазначенияКлиент.ДатаСеанса() + "Неудачное обновление конфигурации");
				Если Не Содержимое = Неопределено И ТипЗнч(Содержимое) = Тип("ФормаКлиентскогоПриложения") Тогда
					Содержимое.Закрыть();
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НеобходимоОжидание И Не МожноЗавершатьРаботу И СчетчикОжиданияРезультатов <= МаксИтерацийОжиданияРезультатов Тогда
		СчетчикОжиданияРезультатов = СчетчикОжиданияРезультатов + 1;
		ПодключитьОбработчикОжидания("ПроверитьНеобходимостьЗавершенияПрограммы", 10, Истина);
	КонецЕсли; 
	
	Если Не ФормаОбновленияНайдена И ФормаОбновленияНайденаОдинРаз Тогда
		МожемЗавершатьРаботу = Истина;
	ИначеЕсли Не ФормаНачальногоЗаполненияНайдена И ФормаНачальногоЗаполненияНайденаОдинРаз Тогда
		МожемЗавершатьРаботу = Истина;
	ИначеЕсли СчетчикОжиданияРезультатов > МаксИтерацийОжиданияРезультатов Тогда
		МожемЗавершатьРаботу = Истина;
	Иначе
		МожемЗавершатьРаботу = Ложь;
	КонецЕсли; 
	
	Если МожемЗавершатьРаботу И НеобходимоОжидание Тогда
		СообщениеКлиенту("Завершена работа клиента 1С");
		СоздатьФайлМаркер();
		ПодключитьОбработчикОжидания("ЗавершитьРаботу", 1, Истина);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПрогресс(Знач Содержимое, ИндикаторВыполнения)
	ПроцентВыполнения = 0;
	Попытка
		Если ТипЗнч(Содержимое) = Тип("ФормаКлиентскогоПриложения") Тогда
			ПроцентВыполнения = Содержимое.ПрогрессВыполнения;
		КонецЕсли; 
	Исключение
		СообщениеКлиенту(ОписаниеОшибки());
	КонецПопытки; 
	
	Если ПроцентВыполнения <> ИндикаторВыполнения Тогда
		ИндикаторВыполнения = ПроцентВыполнения;
		СообщениеКлиенту(" - " + ПроцентВыполнения + "% обновлено");
	КонецЕсли; 
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьПодтверждениеЛегальностиПолученияОбновлений()
	
	УстановитьПривилегированныйРежим(Истина);
	Выполнить("ОбновлениеИнформационнойБазыСлужебный.ЗаписатьПодтверждениеЛегальностиПолученияОбновлений();");
		
КонецПроцедуры
 
&НаКлиенте 
Процедура ПроверитьЛегальностьОбновления() Экспорт
	СтрокаЛегальность = НРег(НСтр("ru='легальност'"));

	Окна = ПолучитьОкна();
	Для каждого Окн Из Окна Цикл
		Если ТипЗнч(Окн) = Тип("ОкноКлиентскогоПриложения") Тогда
			Содержимое = Окн.ПолучитьСодержимое();
			Если СтрНайти(НРег(Строка(Окн.Заголовок)), СтрокаЛегальность) > 0 Тогда
				Попытка
					Если ТипЗнч(Содержимое) = Тип("ФормаКлиентскогоПриложения") Тогда
						Содержимое.Результат = Истина;  
						Содержимое.Закрыть(Истина);
						ЗаписатьПодтверждениеЛегальностиПолученияОбновлений();
						СчетчикОжиданияРезультатов = 0;
					КонецЕсли; 
				Исключение
				    СообщениеКлиенту(ОписаниеОшибки());
				КонецПопытки;
				
				ОтключитьОбработчикОжидания("ПроверитьЛегальностьОбновления");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
				
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьВсеПатчиНаСервере()
	ОбновлениеКонфигурацииВызовСервера.УдалитьИсправленияИзСкрипта();
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРаботу() Экспорт 
	ЗавершитьРаботуСистемы(Истина);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоКонфигурацияНаБазеБСПСервер()
	Рез = Ложь;
	Попытка
		Рез = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы");
	Исключение
		ИнфоОшибки = ИнформацияОбОшибке();
		Рез = НРег(ИнфоОшибки.ИмяМодуля) = НРег("ОбщийМодуль.ОбновлениеИнформационнойБазыБСП.Модуль");
	КонецПопытки;
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура УдалитьВсеПатчи()
	Если СтрНайти(ПараметрЗапуска, "УдалитьВсеПатчи") > 0 Тогда
		СообщениеКлиенту("Удаляю патчи (исправления)");
		Попытка
			УдалитьВсеПатчиНаСервере();
		Исключение
		    СообщениеКлиенту("Удаление патчей не удалось. " + ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	ОтключитьОбработчикОжидания("УдалитьВсеПатчи");
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗагрузитьУстановитьИсправленияНаСервере()
	СостояниеЗагрузкиИсправлений = Неопределено;
	Если Константы.ЗагружатьИУстанавливатьИсправленияАвтоматически.Получить() Тогда
		СостояниеЗагрузкиИсправлений = ПолучениеОбновленийПрограммы.ЗагрузитьИУстановитьИсправления();
	КонецЕсли;
	Возврат СостояниеЗагрузкиИсправлений;
КонецФункции

&НаКлиенте
Процедура ПроверитьУстановитьПатчи()
	Если СтрНайти(ПараметрЗапуска, "УстановитьПатчи") > 0 Тогда
		Попытка
			СостояниеЗагрузкиИсправлений = ЗагрузитьУстановитьИсправленияНаСервере();
		Исключение
			СостояниеЗагрузкиИсправлений = Новый Структура;
			СостояниеЗагрузкиИсправлений.Вставить("Ошибка", Истина);
			СостояниеЗагрузкиИсправлений.Вставить("НеУстановлено", 0);
			СостояниеЗагрузкиИсправлений.Вставить("КраткоеОписаниеОшибки", ОписаниеОшибки());
			СостояниеЗагрузкиИсправлений.Вставить("ПодробноеОписаниеОшибки", ОписаниеОшибки());
		КонецПопытки;
		
		Если НЕ СостояниеЗагрузкиИсправлений = Неопределено Тогда
			Если СостояниеЗагрузкиИсправлений.Ошибка Тогда
				СообщениеКлиенту("[ERROR]	Ошибка загрузки/установки исправлений (патчей)");
				СообщениеКлиенту("[ERROR]	Краткое описание: " + СостояниеЗагрузкиИсправлений.КраткоеОписаниеОшибки);
				СообщениеКлиенту("[ERROR]	Полное описание: " + СостояниеЗагрузкиИсправлений.ПодробноеОписаниеОшибки);
			КонецЕсли;
			Если СостояниеЗагрузкиИсправлений.НеУстановлено > 0 Тогда
				СообщениеКлиенту("[ERROR]	Не установлено исправлений: " + СостояниеЗагрузкиИсправлений.НеУстановлено);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ОтключитьОбработчикОжидания("УстановитьПатчи");
КонецПроцедуры

&НаКлиенте
Процедура СообщениеВЛог(Знач ТекстСообщения)
	Если НЕ ПишемСлужебныйЛог Тогда
		Возврат;
	КонецЕсли;	
	ИмяФайла = ИмяФайлаСлужебногоЛога();
	ФайлЛога = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8, , Истина);
	СтрокаДляЗаписи = ФорматированныйТекстСДатой(ТекстСообщения);
	ФайлЛога.ЗаписатьСтроку(СтрокаДляЗаписи);
	ФайлЛога.Закрыть();	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлМаркер()
	Если НЕ СоздаемФайлМаркер Тогда
		СообщениеВЛог("путь для файл-маркера не найден: " + ИмяФайлМаркера());	
		Возврат;
	КонецЕсли;
	ИмяФайла = ИмяФайлМаркера(Ложь);
	СообщениеВЛог("Записываю файл-маркер: " + ИмяФайла);	
	Текст = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8, , Ложь);
	Попытка
		Текст.ЗаписатьСтроку("0");
		Текст.Закрыть();
	Исключение
		СообщениеВЛог("Не смог записать файл маркер");
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПомеченныеОбъекты()
	НеобходимоУдалитьОбъекты = СтрНайти(ПараметрЗапуска, "УдалитьПомеченныеОбъекты") > 0;	
	Если НеобходимоУдалитьОбъекты Тогда
		//УдалениеПомеченныхОбъектовСлужебный.УдалениеПомеченныхПоРасписанию();
		ЗавершитьРаботуСистемы(Ложь, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеОкнаПереходаНаНовуюВерсию() Экспорт
	ИскомыйЗаголовокОкна = "Переход на новую версию платформы 1С:Предприятие";
	// СообщениеКлиенту("ищем заголовок: " + ИскомыйЗаголовокОкна);
	Окна = ПолучитьОкна();
	Для каждого Окн Из Окна Цикл
		Если НЕ ТипЗнч(Окн) = Тип("ОкноКлиентскогоПриложения") Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ СтрНайти(НРег(Строка(Окн.Заголовок)), ИскомыйЗаголовокОкна) > 0 Тогда
			Продолжить;
		КонецЕсли;
		Содержимое = Окн.Содержимое();
		// добавить проверку на текущую платформу, д.б. больше или равна минимальной
		Попытка
			Если ТипЗнч(Содержимое) = Тип("ФормаКлиентскогоПриложения") Тогда
				Содержимое.Отказ = Ложь;  
				// Содержимое.Закрыть(Истина);
				Содержимое.Закрыть("Продолжить");
				ПолучениеОбновленийПрограммыВызовСервера.СохранитьНастройкиОповещенияОНерекомендуемойВерсииПлатформы();
				СчетчикОжиданияРезультатов = 0;
			КонецЕсли; 
		Исключение
			СообщениеКлиенту(ОписаниеОшибки());
		КонецПопытки;
		
		ОтключитьОбработчикОжидания("ПроверитьНаличиеОкнаПереходаНаНовуюВерсию");
		
	КонецЦикла;	
КонецПроцедуры

СчетчикОжиданияРезультатов = 0;
МаксИтерацийОжиданияРезультатов = 5;
ИндикаторВыполнения = 0;
ФормаОбновленияНайденаОдинРаз = Ложь;
ФормаНачальногоЗаполненияНайденаОдинРаз = Ложь;
